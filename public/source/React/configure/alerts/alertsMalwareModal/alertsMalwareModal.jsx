import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';

import { Stack, Box, Typography } from '@mui/material';
import CircularProgress from '@mui/material/CircularProgress';

import Modal from 'components/inc/modalContainer/modalContainer';
import UploadList from 'components/setup/configureAnalysis/uploadList';
import useSession from 'utils/hooks/useSession';
import useMalwareStatus from 'data-hooks/useMalwareStatus';
import useSoftwareUpgrade from 'utils/hooks/useSoftwareUpgrade';

import sx from './alertsMalwareModal.module.scss';

const AlertsMalwareModal = ({ visibility, setVisibility, values }) => {
  const { session } = useSession();
  const { uploadList, progress, error, success, cleanupUpload } = values;

  /* Software Upgrade States */
  const [softwareUpgradeResult, setSoftwareUpgradeResult] = useState();
  const [softwareUpgradeMessage, setSoftwareUpgradeMessage] = useState();

  /* Software Upgrade Hook */
  const { softwareUpgradeStatusFetch } = useSoftwareUpgrade();

  /* Malware Packages Hook */
  const {
    data: malwareStatus,
    isError: isMalwareStatusError,
    isLoading: isMalwareStatusLoading,
    refetch: refetchMalwareStatus
  } = useMalwareStatus({
    session
  });

  /* Polling Timer */
  let timer;
  const timerInterval = 2000; // 2 Seconds

  /* Fetch and set states for Software Upgrade */
  const getSoftwareUpgrade = async () => {
    const result = await softwareUpgradeStatusFetch();
    setSoftwareUpgradeMessage(result.message);
    setSoftwareUpgradeResult(result.status);
    if (result.status === 'success' && progress === 100) {
      console.log('Re-Fetching Malware Status on Malware Modal...');
      refetchMalwareStatus();
      clearInterval(timer);
      timer = null;
      cleanupUpload();
    }
  };

  /* Fetch Software Upgrade and Malware Status on Component Mount */
  useEffect(() => {
    console.log('Fetching INITIAL Software Upgrade Status on Malware Modal...');
    getSoftwareUpgrade();
  }, []);

  /* Setup Timer when progress changes to 100 */
  useEffect(() => {
    if (progress === 100) {
      timer = setInterval(getSoftwareUpgrade, timerInterval);
    }
  }, [progress]);

  return (
    <Modal
      setVisibility={setVisibility}
      visibility={visibility}
      title='Upload malware signature file'
      cancelText={success ? 'Close' : 'Cancel'}
      onCancel={() => setVisibility(false)}
      width='572px'
    >
      <Stack>
        <Box className={sx.box}>
          <Typography fontSize={12}>
            <strong>Software upgrade details:</strong>
          </Typography>
          <Typography fontSize={12}>
            Status: {softwareUpgradeResult}{' '}
            {softwareUpgradeResult === 'inprogress' ? (
              <span>
                <CircularProgress size={8} />
              </span>
            ) : (
              false
            )}
          </Typography>
          <Typography fontSize={12} paddingBottom={2}>
            Message: {softwareUpgradeMessage}
          </Typography>
          <UploadList
            values={{
              uploadList,
              progress,
              error,
              success,
              cleanupUpload
            }}
          />
          <Typography fontSize={12} paddingTop={2}>
            <strong>Malware signature file details:</strong>
          </Typography>
          {isMalwareStatusLoading && (
            <Typography fontSize={14}>Status: Fetching...</Typography>
          )}
          {isMalwareStatusError && (
            <Typography fontSize={14}>
              No malware signature file installed.
            </Typography>
          )}
          {!isMalwareStatusLoading && !isMalwareStatusError && (
            <>
              <Typography fontSize={12}>
                Installed date: {malwareStatus.date}
              </Typography>
              <Typography fontSize={12}>
                Version: {malwareStatus.version}
              </Typography>
            </>
          )}
        </Box>
      </Stack>
    </Modal>
  );
};

AlertsMalwareModal.propTypes = {
  visibility: PropTypes.bool.isRequired,
  setVisibility: PropTypes.func.isRequired,
  values: PropTypes.shape({
    uploadList: PropTypes.func,
    progress: PropTypes.number,
    error: PropTypes.bool,
    success: PropTypes.bool,
    cleanupUpload: PropTypes.func
  })
};

export default AlertsMalwareModal;
